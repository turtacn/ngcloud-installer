#!/bin/bash
set -e

source $(dirname $0)/version

cd $(dirname $0)/..

echo "Start building ISO"

K3S_VERSION=v1.19.4+k3s1
K3S_IMAGE_URL=https://raw.githubusercontent.com/rancher/k3s/${K3S_VERSION}/scripts/airgap/image-list.txt
LONGHORN_VERSION=v1.1.0-rc1
LONGHORN_IMAGE_URL=https://raw.githubusercontent.com/longhorn/longhorn/${LONGHORN_VERSION}/deploy/longhorn-images.txt
OFFLINE_BUILD="1"

# Prepare Harvester chart
mkdir -p platos/images/70-iso/charts
harvester_chart_path=../harvester/deploy/charts/harvester
if [ ! -d ${harvester_chart_path} ];then
    #git clone --branch v0.1 --single-branch --depth 1 https://github.com/harvester/harvester.git /tmp/harvester
    unzip /go/src/github.com/rancher/harvester-installer/ngcloud-0.1.zip -d /tmp/
    ln -s /tmp/harvester-0.1  /tmp/harvester
    harvester_chart_path=/tmp/harvester/deploy/charts/harvester
fi
helm package ${harvester_chart_path} -d platos/images/70-iso/charts

# Offline docker images
image_list_file='scripts/image-list.txt'
###aliyun##curl ${K3S_IMAGE_URL}>>${image_list_file}
###aliyun##curl ${LONGHORN_IMAGE_URL}>>${image_list_file}

output_image_tar_file="platos/images/70-iso/harvester-images.tar"
if [ -n "${OFFLINE_BUILD}" ] && [ ! -f $output_image_tar_file.zst ]; then
  images=$(cat "${image_list_file}")
  xargs -n1 docker pull <<< "${images}"
  docker save ${images} -o ${output_image_tar_file}

  zstd --rm ${output_image_tar_file} -o ${output_image_tar_file}.zst
fi

# Remaster platos
cd platos
# Update vendors
export GO111MODULE=on
export GOPROXY="https://goproxy.cn,direct"
go mod edit -replace=github.com/nsf/termbox-go=github.com/gitlawr/termbox-go@v0.0.0-20201103025537-250e644d56a6
go mod edit -replace=github.com/rancher/harvester-installer=../
go get
go mod vendor
# make ISO
cd scripts
./default
mkdir -p ../../dist/artifacts
mv ../dist/artifacts/* ../../dist/artifacts
for file in `find ../../dist/artifacts -type f -name '*.iso'`; do mv "$file" "${file/platos/harvester}"; done
